// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/api/service/v1/service.proto

package data

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Data

	// no validation rules for KeyHash

	// no validation rules for ID

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on DataItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataItemMultiError, or nil
// if none found.
func (m *DataItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DataItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ID

	if len(errors) > 0 {
		return DataItemMultiError(errors)
	}

	return nil
}

// DataItemMultiError is an error wrapping multiple validation errors returned
// by DataItem.ValidateAll() if the designated constraints aren't met.
type DataItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataItemMultiError) AllErrors() []error { return m }

// DataItemValidationError is the validation error returned by
// DataItem.Validate if the designated constraints aren't met.
type DataItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataItemValidationError) ErrorName() string { return "DataItemValidationError" }

// Error satisfies the builtin error interface
func (e DataItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataItemValidationError{}

// Validate checks the field values on FileItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileItemMultiError, or nil
// if none found.
func (m *FileItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FileItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Key

	if len(errors) > 0 {
		return FileItemMultiError(errors)
	}

	return nil
}

// FileItemMultiError is an error wrapping multiple validation errors returned
// by FileItem.ValidateAll() if the designated constraints aren't met.
type FileItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileItemMultiError) AllErrors() []error { return m }

// FileItemValidationError is the validation error returned by
// FileItem.Validate if the designated constraints aren't met.
type FileItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileItemValidationError) ErrorName() string { return "FileItemValidationError" }

// Error satisfies the builtin error interface
func (e FileItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileItemValidationError{}

// Validate checks the field values on FileChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileChunkMultiError, or nil
// if none found.
func (m *FileChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *FileChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Filename

	if len(errors) > 0 {
		return FileChunkMultiError(errors)
	}

	return nil
}

// FileChunkMultiError is an error wrapping multiple validation errors returned
// by FileChunk.ValidateAll() if the designated constraints aren't met.
type FileChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileChunkMultiError) AllErrors() []error { return m }

// FileChunkValidationError is the validation error returned by
// FileChunk.Validate if the designated constraints aren't met.
type FileChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileChunkValidationError) ErrorName() string { return "FileChunkValidationError" }

// Error satisfies the builtin error interface
func (e FileChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileChunkValidationError{}

// Validate checks the field values on UploadStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadStatusMultiError, or
// nil if none found.
func (m *UploadStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UploadStatusMultiError(errors)
	}

	return nil
}

// UploadStatusMultiError is an error wrapping multiple validation errors
// returned by UploadStatus.ValidateAll() if the designated constraints aren't met.
type UploadStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadStatusMultiError) AllErrors() []error { return m }

// UploadStatusValidationError is the validation error returned by
// UploadStatus.Validate if the designated constraints aren't met.
type UploadStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadStatusValidationError) ErrorName() string { return "UploadStatusValidationError" }

// Error satisfies the builtin error interface
func (e UploadStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadStatusValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on AddDataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddDataRequestMultiError,
// or nil if none found.
func (m *AddDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDataRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDataRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDataRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDataRequestMultiError(errors)
	}

	return nil
}

// AddDataRequestMultiError is an error wrapping multiple validation errors
// returned by AddDataRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDataRequestMultiError) AllErrors() []error { return m }

// AddDataRequestValidationError is the validation error returned by
// AddDataRequest.Validate if the designated constraints aren't met.
type AddDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDataRequestValidationError) ErrorName() string { return "AddDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDataRequestValidationError{}

// Validate checks the field values on AddDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDataResponseMultiError, or nil if none found.
func (m *AddDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return AddDataResponseMultiError(errors)
	}

	return nil
}

// AddDataResponseMultiError is an error wrapping multiple validation errors
// returned by AddDataResponse.ValidateAll() if the designated constraints
// aren't met.
type AddDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDataResponseMultiError) AllErrors() []error { return m }

// AddDataResponseValidationError is the validation error returned by
// AddDataResponse.Validate if the designated constraints aren't met.
type AddDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDataResponseValidationError) ErrorName() string { return "AddDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDataResponseValidationError{}

// Validate checks the field values on GetDataRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDataRequestMultiError,
// or nil if none found.
func (m *GetDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataID

	if len(errors) > 0 {
		return GetDataRequestMultiError(errors)
	}

	return nil
}

// GetDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataRequestMultiError) AllErrors() []error { return m }

// GetDataRequestValidationError is the validation error returned by
// GetDataRequest.Validate if the designated constraints aren't met.
type GetDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataRequestValidationError) ErrorName() string { return "GetDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataRequestValidationError{}

// Validate checks the field values on GetDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataResponseMultiError, or nil if none found.
func (m *GetDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDataResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDataResponseMultiError(errors)
	}

	return nil
}

// GetDataResponseMultiError is an error wrapping multiple validation errors
// returned by GetDataResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataResponseMultiError) AllErrors() []error { return m }

// GetDataResponseValidationError is the validation error returned by
// GetDataResponse.Validate if the designated constraints aren't met.
type GetDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataResponseValidationError) ErrorName() string { return "GetDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataResponseValidationError{}

// Validate checks the field values on ListDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataResponseMultiError, or nil if none found.
func (m *ListDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataItem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDataResponseValidationError{
						field:  fmt.Sprintf("DataItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDataResponseValidationError{
						field:  fmt.Sprintf("DataItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDataResponseValidationError{
					field:  fmt.Sprintf("DataItem[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDataResponseMultiError(errors)
	}

	return nil
}

// ListDataResponseMultiError is an error wrapping multiple validation errors
// returned by ListDataResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataResponseMultiError) AllErrors() []error { return m }

// ListDataResponseValidationError is the validation error returned by
// ListDataResponse.Validate if the designated constraints aren't met.
type ListDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataResponseValidationError) ErrorName() string { return "ListDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataResponseValidationError{}

// Validate checks the field values on ListDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDataRequestMultiError, or nil if none found.
func (m *ListDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return ListDataRequestMultiError(errors)
	}

	return nil
}

// ListDataRequestMultiError is an error wrapping multiple validation errors
// returned by ListDataRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDataRequestMultiError) AllErrors() []error { return m }

// ListDataRequestValidationError is the validation error returned by
// ListDataRequest.Validate if the designated constraints aren't met.
type ListDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataRequestValidationError) ErrorName() string { return "ListDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataRequestValidationError{}

// Validate checks the field values on DeleteDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataRequestMultiError, or nil if none found.
func (m *DeleteDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataID

	if len(errors) > 0 {
		return DeleteDataRequestMultiError(errors)
	}

	return nil
}

// DeleteDataRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDataRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataRequestMultiError) AllErrors() []error { return m }

// DeleteDataRequestValidationError is the validation error returned by
// DeleteDataRequest.Validate if the designated constraints aren't met.
type DeleteDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataRequestValidationError) ErrorName() string {
	return "DeleteDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataRequestValidationError{}

// Validate checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataResponseMultiError, or nil if none found.
func (m *DeleteDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Response

	if len(errors) > 0 {
		return DeleteDataResponseMultiError(errors)
	}

	return nil
}

// DeleteDataResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteDataResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataResponseMultiError) AllErrors() []error { return m }

// DeleteDataResponseValidationError is the validation error returned by
// DeleteDataResponse.Validate if the designated constraints aren't met.
type DeleteDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataResponseValidationError) ErrorName() string {
	return "DeleteDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataResponseValidationError{}

// Validate checks the field values on ListFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileRequestMultiError, or nil if none found.
func (m *ListFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFileRequestMultiError(errors)
	}

	return nil
}

// ListFileRequestMultiError is an error wrapping multiple validation errors
// returned by ListFileRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileRequestMultiError) AllErrors() []error { return m }

// ListFileRequestValidationError is the validation error returned by
// ListFileRequest.Validate if the designated constraints aren't met.
type ListFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileRequestValidationError) ErrorName() string { return "ListFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileRequestValidationError{}

// Validate checks the field values on ListFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFileResponseMultiError, or nil if none found.
func (m *ListFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFileItem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFileResponseValidationError{
						field:  fmt.Sprintf("FileItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFileResponseValidationError{
						field:  fmt.Sprintf("FileItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFileResponseValidationError{
					field:  fmt.Sprintf("FileItem[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFileResponseMultiError(errors)
	}

	return nil
}

// ListFileResponseMultiError is an error wrapping multiple validation errors
// returned by ListFileResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileResponseMultiError) AllErrors() []error { return m }

// ListFileResponseValidationError is the validation error returned by
// ListFileResponse.Validate if the designated constraints aren't met.
type ListFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileResponseValidationError) ErrorName() string { return "ListFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileResponseValidationError{}
